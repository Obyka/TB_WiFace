swagger: "2.0"
info:
  description: This is the swagger specification which goes with WiFace API.
  version: "1.0.0"
  title: WiFace API
consumes:
  - application/json
produces:
  - application/json

basePath: /api

# Paths supported by the server application
paths:
  /vendors/{oui}:
    get:
      operationId: vendors.read_by_oui
      tags:
        - Vendors
      summary: Get a vendor by its OUI
      description: Get a vendor by its OUI
      parameters:
      - name: oui
        in: path
        description: vendor's OUI
        type: string
        required: True
      responses:
          200:
            description: Successfully read one vendor
            schema:
              $ref: '#/definitions/Vendor'
  /identities/{id_identity}/pictures:
  /represents/identities/{id_picture}:
    get:
      operationId: represents.read_identities_from_picture
      tags:
        - Identities - Pictures
      summary: Get all identities represented on a picture
      description: description:Get all identities represented on a picture
      parameters:
        - name: id_picture
          in: path
          type: integer
          required: True
      responses:
        200:
          description: Successfully read data
          schema:
            type: array
            items:
              $ref: '#/definitions/Represent'
  /identities/{id_identity}/pictures:
    get:
      operationId: identities.read_pictures
      tags:
        - Identities
      summary: Get the pictures ID and probability of relationship with this identity
      description: Get the pictures ID and probability of relationship with this identity
      parameters:
      - name: id_identity
        in: path
        description: Identity to get details of
        type: integer
        required: True
      responses:
        200:
          description: Successfully read Represent relationships 
          schema:
            type: array
            items:
              $ref: '#/definitions/Represent'           
  /represents/{id_picture}/{id_identity}:
    delete:
      operationId: represents.delete
      tags:
        - Identities - Pictures
      summary: Delete a relationship Identities - Pictures
      description: Delete a relationship Identities - Pictures
      parameters:
        - name: id_picture
          in: path
          type: integer
          required: True
        - name: id_identity
          in: path
          type: integer
          required: True
      responses:
        204:
          description: Successfully deleted the relationship
        404:
          description: The relationship was not found.
    get:
      operationId: represents.read_relationship
      tags:
        - Identities - Pictures
      summary: Get the probability of relationship between this image and this identity
      description: Get the probability of relationship between this image and this identity
      parameters:
        - name: id_picture
          in: path
          type: integer
          required: True
        - name: id_identity
          in: path
          type: integer
          required: True
      responses:
        200:
          description: Successfully read relationship Identities - Pictures
          schema:
            $ref: '#/definitions/Represent'
  /represents:
    post:
      operationId: represents.create
      tags:
        - Identities - Pictures
      summary: Create a relationship between an identity and a picture
      description: Create a relationship between an identity and a picture
      parameters:
        - name: represent
          in: body
          description: Relationship to create
          required: True
          schema:
            $ref: '#/definitions/Represent'
      responses:
        201:
          description: Successfully created the relationship
          schema:
            $ref: '#/definitions/Represent'
  /probes:
    get:
      operationId: probes.read_all
      tags:
        - probes
      summary: Read the entire list of probes
      description: Read the list of probes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of probes to get
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering probes
          required: false
      responses:
        200:
          description: Successfully read probes list operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Probe'
    post:
      operationId: probes.create
      tags:
        - probes
      summary: Create a probe
      description: Create a probe
      parameters:
        - name: probe
          in: body
          description: Probe to create
          required: True
          schema:
            $ref: '#/definitions/Probe'
      responses:
        201:
          description: Successfully created probe
          schema:
            $ref: '#/definitions/Probe'
  /probes/{id}:
    get:
      operationId: probes.read_one
      tags:
        - probes
      summary: Read one probe
      description: Read one probe
      parameters:
        - name: id
          in: path
          description: ID of the probe
          type: integer
          required: True
      responses:
        200:
          description: Successfully read one probe
          schema:
            $ref: '#/definitions/Probe'
    delete:
      operationId: probes.delete
      tags:
        - probes
      summary: Delete a probe
      description: Delete a probe
      parameters:
        - name: id
          in: path
          type: integer
          required: True
      responses:
        204:
          description: Successfully deleted the probe request.
        404:
          description: The probe request was not found. 
  /macs:
    get:
      operationId: macs.read_all
      tags:
        - MAC Address
      summary: Read the entire list of mac adresses
      description: Read the list of adresses
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of mac adresses to get
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering mac adresses
          required: false
      responses:
        200:
          description: Successfully read mac adresses list operation
          schema:
            type: array
            items:
              $ref: '#/definitions/MACAddress'
    post:
      operationId: macs.create
      tags:
        - MAC Address
      summary: Create a MAC address
      description: Create a MAC address
      parameters:
        - name: mac
          in: body
          description: MAC address to create
          required: True
          schema:
            $ref: '#/definitions/MACAddress'
      responses:
        201:
          description: Successfully created MAC Address.
          schema:
            $ref: '#/definitions/MACAddress'
        409:
          description: The MAC Address already exists.
  /macs/{address}/identities:
    get:
      operationId: macs.read_identities
      tags:
        - MAC Address
      summary: Get the identities ID and probability of relationship with this MAC address
      description: Get the identities ID and probability of relationship with this MAC address
      parameters:
        - name: address
          in: path
          description: MAC address to get details of
          type: string
          required: True
      responses:
        200:
          description: Successfully read identities list 
          schema:
            type: array
            items:
              $ref: '#/definitions/BelongTo'
  /belongsto/{address}/{id}:
    delete:
      operationId: belongsto.delete
      tags:
        - MAC Address - Identities
      summary: Delete a relationship MAC Address - Identities
      description: Delete a relationship MAC Address - Identities
      parameters:
        - name: address
          in: path
          type: string
          required: True
        - name: id
          in: path
          type: integer
          required: True
      responses:
        204:
          description: Successfully deleted the relationship.
        404:
          description: The relationship was not found.
    get:
      operationId: belongsto.read_identities
      tags:
        - MAC Address - Identities
      summary: Get the probability of relationship between this identity and this MAC address
      description: Get the probability of relationship between this identity and this MAC address
      parameters:
        - name: address
          in: path
          description: MAC address
          type: string
          required: True
        - name: id
          in: path
          description: id of the identity
          type: integer
          required: True
      responses:
        200:
          description: Successfully read one belongsTo relationship
          schema:
            $ref: '#/definitions/BelongTo'
  /belongsto:
    get:
      summary: Successfully read belongsTo relationships
      description: Read all belongsTo relationships
      operationId: belongsto.read_all
      tags:
        - MAC Address - Identities
      responses:
        200:
          description: Successfully read all belongsTo relationships
          schema:
            type: array
            items:
              $ref: '#/definitions/BelongTo'
    post:
      operationId: belongsto.create
      tags:
        - MAC Address - Identities
      summary: Create a relationship between a MAC address and an identity
      description: Create a relationship between a MAC address and an identity
      parameters:
        - name: belongsto
          in: body
          description: Relationship to create
          required: True
          schema:
            $ref: '#/definitions/BelongTo'
      responses:
        201:
          description: Successfully created the relationship
          schema:
            $ref: '#/definitions/BelongTo'
  /macs/{address}:
    get:
      operationId: macs.read_one
      tags:
        - MAC Address
      summary: Read one MAC Address
      description: Read one MAC Address
      parameters:
        - name: address
          in: path
          description: MAC address to get details of
          type: string
          required: True
      responses:
        200:
          description: Successfully read one MAC Address
          schema:
            $ref: '#/definitions/MACAddress'
    delete:
      operationId: macs.delete
      tags:
        - MAC Address
      summary: Delete a MAC Address
      description: Delete a MAC Address
      parameters:
        - name: address
          in: path
          type: string
          required: True
      responses:
        204:
          description: Successfully deleted a MAC Address.
        404:
          description: The MAC Address was not found.
  /places:
      get:
        operationId: places.read_all
        tags:
          - Places
        summary: Read the entire list of places
        description: Read the list of places
        parameters:
          - name: length
            in: query
            type: integer
            description: Number of places to get
            required: false
          - name: offset
            in: query
            type: integer
            description: Offset from beginning of list where to start gathering places
            required: false
        responses:
          200:
            description: Successfully read places list operation
            schema:
              type: array
              items:
                $ref: '#/definitions/Place'
      post:
        operationId: places.create
        tags:
          - Places
        summary: Create a place
        description: Create a place
        parameters:
          - name: place
            in: body
            description: Place to create
            required: True
            schema:
              $ref: '#/definitions/Place'
        responses:
          201:
            description: Successfully created the place.
            schema:
              $ref: '#/definitions/Place'
  /places/{id}:
      get:
        operationId: places.read_one
        tags:
          - Places
        summary: Read one place
        description: Read one place
        parameters:
          - name: id
            in: path
            description: Place to get details of
            type: integer
            required: True
        responses:
          200:
            description: Successfully read one place
            schema:
              $ref: '#/definitions/Place'
      delete:
        operationId: places.delete
        tags:
          - Places
        summary: Delete a place
        description: Delete a place
        parameters:
          - name: id
            in: path
            type: integer
            required: True
        responses:
          204:
            description: Successfully deleted the place.
          404:
            description: The place was not found.
  /identities:
    get:
      operationId: identities.read_all
      tags:
        - Identities
      summary: Read the entire list of identities
      description: Read the list of identities
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of identities to get
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering identities
          required: false
      responses:
        200:
          description: Successfully read identities list operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Identity'
    post:
      operationId: identities.create
      tags:
        - Identities
      summary: Create an identitiy
      description: Create an identitiy
      parameters:
        - name: identitiy
          in: body
          description: identitiy to create
          required: True
          schema:
            $ref: '#/definitions/Identity'
      responses:
        201:
          description: Successfully created the identitiy.
          schema:
            $ref: '#/definitions/Identity'
  /identities/uuid/{uuid}:
    get:
      operationId: identities.read_one_by_uuid
      tags:
        - Identities
      summary: Read one identitiy by its uuid
      description: Read one identitiy by its uuid
      parameters:
        - name: uuid
          in: path
          description: identitiy to get details of
          type: string
          required: True
      responses:
        200:
          description: Successfully read one identitiy
          schema:
            $ref: '#/definitions/Identity'
  /identities/{id}:
    get:
      operationId: identities.read_one
      tags:
        - Identities
      summary: Read one identitiy
      description: Read one identitiy
      parameters:
        - name: id
          in: path
          description: identitiy to get details of
          type: integer
          required: True
      responses:
        200:
          description: Successfully read one identitiy
          schema:
            $ref: '#/definitions/Identity'
    delete:
      operationId: identities.delete
      tags:
        - Identities
      summary: Delete an identitiy
      description: Delete an identitiy
      parameters:
        - name: id
          in: path
          type: integer
          required: True
      responses:
        204:
          description: Successfully deleted the identitiy.
        404:
          description: The identity was not found.
  /pictures:
    get:
      operationId: pictures.read_all
      tags:
        - Pictures
      summary: Read the entire list of pictures
      description: Read the list of pictures
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of pictures to get
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering pictures
          required: false
      responses:
        200:
          description: Successfully read pictures list operation
          schema:
            type: array
            items: 
              $ref: '#/definitions/Picture'           
    post:
      operationId: pictures.create
      tags:
        - Pictures
      summary: Create a picture
      description: Create a picture
      parameters:
        - name: picture
          in: body
          description: Picture to create
          required: True
          schema:
            $ref: '#/definitions/Picture'
      responses:
        201:
          description: Successfully created picture
          schema:
            $ref: '#/definitions/Picture'
  /pictures/{id}:
    get:
      operationId: pictures.read_one
      tags:
        - Pictures
      summary: Read one picture
      description: Read one picture
      parameters:
        - name: id
          in: path
          description: ID of the picture
          type: integer
          required: True
      responses:
        200:
          description: Successfully read one picture
          schema:
            $ref: '#/definitions/Picture'
    delete:
      operationId: pictures.delete
      tags:
        - Pictures
      summary: Delete a picture
      description: Delete a picture
      parameters:
        - name: id
          in: path
          type: integer
          required: True
      responses:
        204:
          description: Successfully deleted the picture.
        404:
          description: The picture was not found.
  /register:
    post:
        operationId: users.create
        tags:
          - Users
        summary: Create an user
        description: Create an user
        parameters:
          - name: user
            in: body
            description: user to create
            required: True
            schema:
              $ref: '#/definitions/User'
        responses:
          201:
            description: Successfully created the user
            schema:
              $ref: '#/definitions/User'
          409:
            description: The mail address is already taken.            
  /refresh:
    post:
      operationId: users.refresh
      tags:
        - Users
      summary: Refresh the user access JWTtoken
      description: Refresh the user access JWTtoken
      responses:
        '200':
          description: >
            Successfully refreshed the access token.
            The new access and refresh JWTTokens are returned in a cookie. You need to include this cookie in subsequent requests.
          headers: 
            Set-Cookie:
              type: string 
  /logout:
    post:
      operationId: users.logout
      tags:
        - Users
      summary: Log out an user
      description: Log out an user
      responses:
        200:
          description: >
            Successfully deauthenticated.
            The access and refresh JWTTokens are returned empty in a cookie.
          headers: 
            Set-Cookie:
              type: string
  /login:
    post:
        operationId: users.login
        tags:
          - Users
        summary: Log as an user
        description: Log as an user
        parameters:
          - name: user
            in: body
            description: User to authenticate
            required: True
            schema:
              $ref: '#/definitions/Credentials'
        responses:
          200:
            description: >
              Successfully authenticated.
              The access and refresh JWTTokens are returned in a cookie. You need to include this cookie in subsequent requests.
            headers: 
              Set-Cookie:
                type: string
  /upload:
    post:
      consumes: 
        - multipart/form-data
      operationId: upload.upload
      tags:
        - File
      summary: Upload a picture to the server
      description: Upload a picture to the server
      parameters:
        - name: file
          in: formData
          type: file
          description: file to upload
      responses:
          201:
            description: Picture successfully uploaded.
          400:
            description: Bad request (No file part, bad extension).
definitions:
  BelongTo:
    properties:
      fk_mac:
        type: string
      fk_identity:
        type: integer
      probability:
        type: integer
  Represent:
    properties:
      probability:
        type: number
      fk_identity:
        type: integer
      fk_picture:
        type: integer
  Probe:
    properties:
      id:
        type: integer
      timestamp:
        type: string
      ssid:
        type: string
      fk_place:
        type: integer
        description: ID of the place where the probe was sniffed
      fk_mac:
        type: string
        description: ID of the MAC contained in the probe
  Vendor:
    properties:
      name:
        type: string
      oui:
        type: string
  MACAddress:
    properties:
      address:
        type: integer
      isRandom:
        type: boolean
      fk_vendor:
        type: string
      PP2I: 
        type: boolean
  Place:
    properties:
      id:
        type: integer
      name:
        type: string
      longitude:
        type: number
      latitude:
        type: number
  Identity:
    properties:
      id:
        type: integer
      firstname:
        type: string
      lastname:
        type: string
      mail:
        type: string
      uuid:
        type: string
  Credentials:
    properties:
      email:
        type: string
      password:
        type: string
  User:
    allOf:
    - $ref: '#/definitions/Credentials'
    - type: object
      required:
      - admin
        fk_place
      properties:
        admin:
          type: boolean
        fk_place:
          type: integer
  Picture:
    properties:
      id:
        type: integer
      timestamp:
        type: string
      picPath:
        type: string
      fk_place:
        type: integer
        description: ID of the place where the picture was sniffed
      eyeglasses:
        type: number
        description: Does the subject on the picture wear eyeglasses ? Yes = positive value
        minimum: -1.0
        maximum: 1.0
      sunglasses:
        type: number
        description: Does the subject on the picture wear sunglasses ? Yes = positive value
        minimum: 0.0
        maximum: 1.0
      gender:
        type: number
        description: >
          What gender does the subject on appear to be on this picture
          based on the physical appearance of a face in a particular image ? 
          This kind of prediction is not designed to categorize a person’s gender identity.
          Female = positive value
        minimum: -1.0
        maximum: 1.0
      beard:
        type: number
        description: Does the subject on the picture has a beard ? Yes = positive value
        minimum: -1.0
        maximum: 1.0
      mustache:
        type: number
        description: Does the subject on the picture has a mustache ? Yes = positive value
        minimum: -1.0
        maximum: 1.0
      ageMin:
        type: integer
        description: Minimum value for estimated subject age range.
        minimum: 0
      ageMax:
        type: integer
        description: Maximum value for estimated subject age range.
      calm:
        type: number
        description: Does the subject seem calm ?
        minimum: 0
        maximum: 1.0
      sad:
        type: number
        description: Does the subject seem sad ?
        minimum: 0
        maximum: 1.0
      surprised:
        type: number
        description: Does the subject seem surprised ?
        minimum: 0
        maximum: 1.0
      angry:
        type: number
        description: Does the subject seem angry ?
        minimum: 0
        maximum: 1.0
      happy:
        type: number
        description: Does the subject seem happy ?
        minimum: 0
        maximum: 1.0
      confused:
        type: number
        description: Does the subject seem confused ?
        minimum: 0
        maximum: 1.0
      fear:
        type: number
        description: Does the subject seem afraid ?
        minimum: 0
        maximum: 1.0
      disgusted:
        type: number
        description: Does the subject seem disgusted ?
        minimum: 0
        maximum: 1.0
      brightness:
        type: number
        description: How bright the picture is
        minimum: 0
        maximum: 1.0
      sharpness:
        type: number
        description: How sharp the picture is
        minimum: 0
        maximum: 1.0